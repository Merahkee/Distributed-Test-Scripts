<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522132570000</longProp>
        <longProp name="ThreadGroup.end_time">1522132570000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;
import org.openqa.selenium;
import java.time.temporal.ChronoUnit;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;   
import java.io.*;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.NoAlertPresentException;	
import org.openqa.selenium.Alert;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.By;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import java.io.IOException;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;

WDS.sampleResult.sampleStart();
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();
WebDriverWait wait= new WebDriverWait(WDS.browser,60);

try{
vars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));
vars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));
vars.put(&quot;Home&quot;,&quot;0&quot;);
vars.put(&quot;Product&quot;,&quot;0&quot;);
vars.put(&quot;cart&quot;,&quot;0&quot;);
vars.put(&quot;Search&quot;,&quot;0&quot;);

        try {
               InetAddress ipAddr = InetAddress.getLocalHost();
vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));
                } catch (UnknownHostException ex) {
                    ex.printStackTrace();
                }

d = new Dimension(1750, 1000);
WDS.browser.manage().window().setSize(d);
vars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));
WDS.browser.get(&quot;https://www.amazon.in/&quot;);

cart=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//span[@class=&apos;nav-cart-icon nav-sprite&apos;]&quot;)));
start=LocalDateTime.now();
start1=LocalDateTime.now();
cart.click();
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;a-row sc-cart-header&apos;]&quot;)));
end=LocalDateTime.now();
end1=LocalDateTime.now();
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
vars.put(&quot;cart&quot;,String.valueOf(minutesBetween));
WDS.log.info(vars.get(&quot;cart&quot;));
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/input[@id=&apos;twotabsearchtextbox&apos;]&quot;))).sendKeys(new String[] {&quot;college bags&quot;});
searchbtn=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/input[@type=&apos;submit&apos;]&quot;)));
start=LocalDateTime.now();
start2=LocalDateTime.now();
searchbtn.click();
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//span/span[@class=&apos;a-color-state a-text-bold&apos;]&quot;)));
end=LocalDateTime.now();
end2=LocalDateTime.now();
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
vars.put(&quot;search&quot;,String.valueOf(minutesBetween));
WDS.log.info(vars.get(&quot;search&quot;));
home=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//a/span[@class=&apos;nav-logo-base nav-sprite&apos;]&quot;)));
start=LocalDateTime.now();
start3=LocalDateTime.now();
start4=LocalDateTime.now();
home.click();
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//h2/span[@class=&apos;a-color-base&apos;]&quot;)));
end=LocalDateTime.now();
end3=LocalDateTime.now();
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
vars.put(&quot;Home&quot;,String.valueOf(minutesBetween));
WDS.log.info(vars.get(&quot;Home&quot;));

product=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/a[@class=&apos;a-link-normal  a-inline-block&apos;]&quot;)));
product.click();
end=LocalDateTime.now();
end4=LocalDateTime.now();
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
vars.put(&quot;Product&quot;,String.valueOf(minutesBetween));
WDS.log.info(vars.get(&quot;Product&quot;));

}catch(Exception e)
{
WDS.log.info(&quot;some excpetion&quot;);
}

finally{
        try {
           InetAddress ipAddr = InetAddress.getLocalHost();
          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));

            } catch (UnknownHostException ex) {
                ex.printStackTrace();
            }
    EndTime=LocalDateTime.now();
    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_Amazonautotwo_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); 
    p = new PrintStream(f);
    WDS.log.info(&quot; EndTime = &quot;+EndTime);
    WDS.sampleResult.sampleEnd();
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: cart = &quot;+vars.get(&quot;cart&quot;));
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: cart = &quot;+vars.get(&quot;cart&quot;));

    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u! start_cart = &quot;+start1);
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u! end_cart = &quot;+end1);


    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: search = &quot;+vars.get(&quot;search&quot;));
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: search = &quot;+vars.get(&quot;search&quot;));

    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u! start_search = &quot;+start2);
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u! end_search = &quot;+end2);

    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Home = &quot;+vars.get(&quot;Home&quot;));
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Home = &quot;+vars.get(&quot;Home&quot;));

    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u! start_Home = &quot;+start3);
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u! end_Home = &quot;+end3);

    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);
    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));
    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);
    p.close();
}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">beanshell</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
